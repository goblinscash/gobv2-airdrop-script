/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AirdropDistributorInterface extends Interface {
  getFunction(nameOrSignature: "distributeTokens"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Airdrop"): EventFragment;

  encodeFunctionData(
    functionFragment: "distributeTokens",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeTokens",
    data: BytesLike
  ): Result;
}

export namespace AirdropEvent {
  export type InputTuple = [
    _wallet: AddressLike,
    _amount: BigNumberish,
    _tokenId: AddressLike
  ];
  export type OutputTuple = [
    _wallet: string,
    _amount: bigint,
    _tokenId: string
  ];
  export interface OutputObject {
    _wallet: string;
    _amount: bigint;
    _tokenId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirdropDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): AirdropDistributor;
  waitForDeployment(): Promise<this>;

  interface: AirdropDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  distributeTokens: TypedContractMethod<
    [
      _erc20TokenAddress: AddressLike,
      _wallets: AddressLike[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "distributeTokens"
  ): TypedContractMethod<
    [
      _erc20TokenAddress: AddressLike,
      _wallets: AddressLike[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Airdrop"
  ): TypedContractEvent<
    AirdropEvent.InputTuple,
    AirdropEvent.OutputTuple,
    AirdropEvent.OutputObject
  >;

  filters: {
    "Airdrop(address,uint256,address)": TypedContractEvent<
      AirdropEvent.InputTuple,
      AirdropEvent.OutputTuple,
      AirdropEvent.OutputObject
    >;
    Airdrop: TypedContractEvent<
      AirdropEvent.InputTuple,
      AirdropEvent.OutputTuple,
      AirdropEvent.OutputObject
    >;
  };
}
