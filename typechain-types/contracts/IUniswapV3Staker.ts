/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IUniswapV3Staker {
  export type IncentiveKeyStruct = {
    rewardToken: AddressLike;
    pool: AddressLike;
    startTime: BigNumberish;
    endTime: BigNumberish;
    refundee: AddressLike;
  };

  export type IncentiveKeyStructOutput = [
    rewardToken: string,
    pool: string,
    startTime: bigint,
    endTime: bigint,
    refundee: string
  ] & {
    rewardToken: string;
    pool: string;
    startTime: bigint;
    endTime: bigint;
    refundee: string;
  };

  export type IncentiveStruct = {
    totalRewardUnclaimed: BigNumberish;
    totalSecondsClaimedX128: BigNumberish;
    numberOfStakes: BigNumberish;
  };

  export type IncentiveStructOutput = [
    totalRewardUnclaimed: bigint,
    totalSecondsClaimedX128: bigint,
    numberOfStakes: bigint
  ] & {
    totalRewardUnclaimed: bigint;
    totalSecondsClaimedX128: bigint;
    numberOfStakes: bigint;
  };
}

export interface IUniswapV3StakerInterface extends Interface {
  getFunction(
    nameOrSignature: "getRewardInfo" | "incentives"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "IncentiveCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getRewardInfo",
    values: [IUniswapV3Staker.IncentiveKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentives",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incentives", data: BytesLike): Result;
}

export namespace IncentiveCreatedEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    pool: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    refundee: AddressLike,
    minWidth: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    rewardToken: string,
    pool: string,
    startTime: bigint,
    endTime: bigint,
    refundee: string,
    minWidth: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    rewardToken: string;
    pool: string;
    startTime: bigint;
    endTime: bigint;
    refundee: string;
    minWidth: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IUniswapV3Staker extends BaseContract {
  connect(runner?: ContractRunner | null): IUniswapV3Staker;
  waitForDeployment(): Promise<this>;

  interface: IUniswapV3StakerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRewardInfo: TypedContractMethod<
    [key: IUniswapV3Staker.IncentiveKeyStruct, tokenId: BigNumberish],
    [[bigint, bigint] & { reward: bigint; secondsInsideX128: bigint }],
    "view"
  >;

  incentives: TypedContractMethod<
    [key: BytesLike],
    [IUniswapV3Staker.IncentiveStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRewardInfo"
  ): TypedContractMethod<
    [key: IUniswapV3Staker.IncentiveKeyStruct, tokenId: BigNumberish],
    [[bigint, bigint] & { reward: bigint; secondsInsideX128: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "incentives"
  ): TypedContractMethod<
    [key: BytesLike],
    [IUniswapV3Staker.IncentiveStructOutput],
    "view"
  >;

  getEvent(
    key: "IncentiveCreated"
  ): TypedContractEvent<
    IncentiveCreatedEvent.InputTuple,
    IncentiveCreatedEvent.OutputTuple,
    IncentiveCreatedEvent.OutputObject
  >;

  filters: {
    "IncentiveCreated(address,address,uint256,uint256,address,int24,uint256)": TypedContractEvent<
      IncentiveCreatedEvent.InputTuple,
      IncentiveCreatedEvent.OutputTuple,
      IncentiveCreatedEvent.OutputObject
    >;
    IncentiveCreated: TypedContractEvent<
      IncentiveCreatedEvent.InputTuple,
      IncentiveCreatedEvent.OutputTuple,
      IncentiveCreatedEvent.OutputObject
    >;
  };
}
