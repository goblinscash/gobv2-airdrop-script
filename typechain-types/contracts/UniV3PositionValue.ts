/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UniV3PositionValueInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fees"
      | "feesGas"
      | "principal"
      | "principalGas"
      | "total"
      | "totalGas"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feesGas",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "principal",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "principalGas",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "total",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGas",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feesGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "principal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "principalGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalGas", data: BytesLike): Result;
}

export interface UniV3PositionValue extends BaseContract {
  connect(runner?: ContractRunner | null): UniV3PositionValue;
  waitForDeployment(): Promise<this>;

  interface: UniV3PositionValueInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fees: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  feesGas: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  principal: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  principalGas: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [bigint],
    "view"
  >;

  total: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  totalGas: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "feesGas"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "principal"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "principalGas"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "total"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalGas"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish, sqrtRatioX96: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
